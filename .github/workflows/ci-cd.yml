name: CAS Document Management System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Unit Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json

    - name: Install Python dependencies
      run: |
        cd ingest-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy

    - name: Install Node.js dependencies
      run: |
        cd admin-dashboard
        npm ci

    - name: Run Python linting
      run: |
        cd ingest-service
        black --check .
        flake8 .
        mypy .

    - name: Run Python tests
      run: |
        cd ingest-service
        pytest --cov=app --cov-report=xml --cov-report=html

    - name: Run Node.js linting
      run: |
        cd admin-dashboard
        npm run lint

    - name: Run Node.js tests
      run: |
        cd admin-dashboard
        npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ingest-service/coverage.xml
        flags: python
        name: python-coverage

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: test-results/

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, integration-test, security]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Ingest Service
      uses: docker/build-push-action@v5
      with:
        context: ./ingest-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ingest-service:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Admin Dashboard
      uses: docker/build-push-action@v5
      with:
        context: ./admin-dashboard
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin-dashboard:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Indexing Service
      uses: docker/build-push-action@v5
      with:
        context: ./indexing-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/indexing-service:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in manifests
        sed -i "s|cas-ingest-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ingest-service:${{ github.sha }}|g" k8s/ingest-service-deployment.yaml
        sed -i "s|cas-admin-dashboard:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin-dashboard:${{ github.sha }}|g" k8s/admin-dashboard-deployment.yaml
        sed -i "s|cas-indexing-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/indexing-service:${{ github.sha }}|g" k8s/indexing-service-deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres-statefulset.yaml
        kubectl apply -f k8s/ingest-service-deployment.yaml
        kubectl apply -f k8s/admin-dashboard-deployment.yaml
        kubectl apply -f k8s/indexing-service-deployment.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/cas-ingest-service -n cas-dms --timeout=300s
        kubectl rollout status deployment/cas-admin-dashboard -n cas-dms --timeout=300s
        kubectl rollout status deployment/cas-indexing-service -n cas-dms --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        kubectl port-forward svc/cas-ingest-service 8000:8000 -n cas-dms &
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        
        kubectl port-forward svc/cas-admin-dashboard 3001:3000 -n cas-dms &
        sleep 10
        curl -f http://localhost:3001 || exit 1

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in manifests
        sed -i "s|cas-ingest-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ingest-service:${{ github.event.release.tag_name }}|g" k8s/ingest-service-deployment.yaml
        sed -i "s|cas-admin-dashboard:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin-dashboard:${{ github.event.release.tag_name }}|g" k8s/admin-dashboard-deployment.yaml
        sed -i "s|cas-indexing-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/indexing-service:${{ github.event.release.tag_name }}|g" k8s/indexing-service-deployment.yaml
        
        # Apply manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/postgres-statefulset.yaml
        kubectl apply -f k8s/ingest-service-deployment.yaml
        kubectl apply -f k8s/admin-dashboard-deployment.yaml
        kubectl apply -f k8s/indexing-service-deployment.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/cas-ingest-service -n cas-dms --timeout=600s
        kubectl rollout status deployment/cas-admin-dashboard -n cas-dms --timeout=600s
        kubectl rollout status deployment/cas-indexing-service -n cas-dms --timeout=600s

    - name: Run production tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test health endpoints
        kubectl port-forward svc/cas-ingest-service 8000:8000 -n cas-dms &
        sleep 15
        curl -f http://localhost:8000/health || exit 1
        
        kubectl port-forward svc/cas-admin-dashboard 3001:3000 -n cas-dms &
        sleep 15
        curl -f http://localhost:3001 || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic here (Slack, Teams, etc.)

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install locust

    - name: Run performance tests
      run: |
        # Start performance test against development environment
        locust -f performance-tests/locustfile.py --host=http://dev-cas-dms.example.com --users=10 --spawn-rate=2 --run-time=5m --headless

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/ 