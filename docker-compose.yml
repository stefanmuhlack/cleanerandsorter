version: '3.8'

services:
  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: cas_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_SERVER_URL: http://localhost:9000
      MINIO_DOMAIN: localhost
      MINIO_BROWSER: "on"
      MINIO_QUIET: "off"
      MINIO_ANONYMOUS: "off"
      MINIO_COMPRESS: "on"
      MINIO_COMPRESS_EXTENSIONS: ".txt,.log,.csv,.json,.xml,.md,.html,.css,.js"
      MINIO_COMPRESS_MIME_TYPES: "text/*,application/json,application/xml"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
      - ./backups/minio:/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: cas_postgres
    environment:
      POSTGRES_DB: cas_dms
      POSTGRES_USER: cas_user
      POSTGRES_PASSWORD: cas_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cas_user -d cas_dms"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: cas_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: cas_user
      RABBITMQ_DEFAULT_PASS: cas_password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cas_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: cas_kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Diskover Indexing Service (commented out due to image availability)
  # diskover:
  #   image: diskoverdata/diskover-community:latest
  #   container_name: cas_diskover
  #   environment:
  #     - ELASTICSEARCH_HOST=elasticsearch
  #     - ELASTICSEARCH_PORT=9200
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   volumes:
  #     - ./config/diskover:/diskover/config
  #     - ./data/sorted:/data/sorted:ro
  #   depends_on:
  #     elasticsearch:
  #       condition: service_healthy
  #   restart: unless-stopped

  # Redis for Diskover
  redis:
    image: redis:7-alpine
    container_name: cas_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Paperless-ngx DMS
  paperless:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: cas_paperless
    ports:
      - "8010:8000"
    environment:
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBHOST: postgres
      PAPERLESS_DBPORT: 5432
      PAPERLESS_DBNAME: cas_dms
      PAPERLESS_DBUSER: cas_user
      PAPERLESS_DBPASS: cas_password
      PAPERLESS_SECRET_KEY: your-secret-key-here
      PAPERLESS_TIME_ZONE: Europe/Berlin
      PAPERLESS_OCR_LANGUAGE: deu+eng
      PAPERLESS_CONSUMER_POLLING: 10
      PAPERLESS_CONSUMER_DELETE_DUPLICATES: true
      PAPERLESS_TASK_WORKERS: 2
      PAPERLESS_WEB_WORKERS: 2
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
      - ./config/paperless:/usr/src/paperless/export
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Ingest Service
  ingest-service:
    build:
      context: ./ingest-service
      dockerfile: Dockerfile
    container_name: cas_ingest
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - RABBITMQ_URL=amqp://cas_user:cas_password@rabbitmq:5672/
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=INFO
    volumes:
      - ./config/sorting-rules.yaml:/app/config/sorting-rules.yaml:ro
      - ./data/source:/data/source:ro
      - ./data/sorted:/data/sorted
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: cas_admin_dashboard
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MINIO_ENDPOINT=http://localhost:9000
      - REACT_APP_ELASTICSEARCH_URL=http://localhost:9200
      - REACT_APP_PAPERLESS_URL=http://localhost:8010
    depends_on:
      - ingest-service
      - paperless

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: cas_ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # LLM Management Service
  llm-manager:
    build:
      context: ./llm-manager
      dockerfile: Dockerfile
    container_name: cas_llm_manager
    ports:
      - "8001:8000"
    environment:
      - OLLAMA_URL=http://ollama:11434
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./config/llm-config.yaml:/app/config/llm-config.yaml
    depends_on:
      - ollama
    restart: unless-stopped

  # Email Processing Service
  email-processor:
    build:
      context: ./email-processor
      dockerfile: Dockerfile
    container_name: cas_email_processor
    ports:
      - "8002:8000"
    environment:
      - PAPERLESS_URL=http://paperless:8000
      - RABBITMQ_URL=amqp://cas_user:cas_password@rabbitmq:5672/
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=INFO
    volumes:
      - ./config/email-config.yaml:/app/config/email-config.yaml
      - email_attachments:/app/attachments
    depends_on:
      - paperless
      - rabbitmq
    restart: unless-stopped

  # OTRS Integration Service
  otrs-integration:
    build:
      context: ./otrs-integration
      dockerfile: Dockerfile
    container_name: cas_otrs_integration
    ports:
      - "8003:8000"
    environment:
      - OTRS_API_URL=http://otrs.company.com/api
      - OTRS_API_KEY=${OTRS_API_KEY}
      - RABBITMQ_URL=amqp://cas_user:cas_password@rabbitmq:5672/
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=INFO
    volumes:
      - ./config/otrs-config.yaml:/app/config/otrs-config.yaml
      - otrs_attachments:/app/attachments
    restart: unless-stopped

  # Backup Service
  backup-service:
    build:
      context: ./backup-service
      dockerfile: Dockerfile
    container_name: cas_backup_service
    ports:
      - "8004:8000"
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - POSTGRES_URL=postgresql://cas_user:cas_password@postgres:5432/cas_dms
      - BACKUP_RETENTION_DAYS=30
      - LOG_LEVEL=INFO
    volumes:
      - ./backups:/app/backups
      - ./config/backup-config.yaml:/app/config/backup-config.yaml
    depends_on:
      - minio
      - postgres
    restart: unless-stopped

  # TLD and Email Management Service
  tld-manager:
    build:
      context: ./tld-manager
      dockerfile: Dockerfile
    container_name: cas_tld_manager
    ports:
      - "8005:8000"
    environment:
      - SMTP_HOST=${SMTP_HOST:-mail.company.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - TLD_REPORTS_PATH=/mnt/nas/tld-reports
      - TLD_DOMAINS_FILE=/app/config/domains.yaml
      - TLD_AUTO_REPORTS=true
      - TLD_REPORT_SCHEDULE=weekly
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@company.com}
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - ./config:/app/config:ro
      - nas-share:/mnt/nas
    depends_on:
      - llm-manager
    restart: unless-stopped

  # Footage and Media Management Service
  footage-service:
    build:
      context: ./footage-service
      dockerfile: Dockerfile
    container_name: cas_footage_service
    ports:
      - "8006:8000"
    environment:
      - FOOTAGE_PATH=/mnt/nas/footage
      - THUMBNAILS_PATH=/mnt/nas/thumbnails
      - TEMP_PATH=/tmp/footage
      - FOOTAGE_MAX_SIZE=1073741824
      - FOOTAGE_ENABLE_LLM=true
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - ./config:/app/config:ro
      - nas-share:/mnt/nas
      - footage_temp:/tmp/footage
    depends_on:
      - llm-manager
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: cas_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: cas_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  minio_data:
  postgres_data:
  rabbitmq_data:
  elasticsearch_data:
  redis_data:
  paperless_data:
  paperless_media:
  prometheus_data:
  grafana_data:
  minio_config:
  ollama_data:
  email_attachments:
  otrs_attachments:
  nas-share:
  footage_temp:

networks:
  default:
    name: cas_network 